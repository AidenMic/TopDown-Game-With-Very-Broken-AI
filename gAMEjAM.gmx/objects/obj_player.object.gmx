<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playerMoveDown</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Everything

//Set Variables
global.playerHealth = 40;
global.scrap = 50;
moveSpeed = 4;
imageSpeed = .25;
imageScale = .5;
pushDamage = 7;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///STEP IT UP

if (global.pause) {
    exit;
}

if (global.playerHealth &lt;= 0) {
    scr_death();
    instance_destroy();
}

//Get Movements
moveUp = (keyboard_check(vk_up) + keyboard_check(ord('W')));
moveDown = (keyboard_check(vk_down) + keyboard_check(ord('S')));
moveLeft = (keyboard_check(vk_left) + keyboard_check(ord('A')));
moveRight = (keyboard_check(vk_right) + keyboard_check(ord('D')));
moving = (moveUp + moveDown + moveLeft + moveRight);
throwWrench = (device_mouse_check_button_pressed(0, mb_left));
placeBomb = (device_mouse_check_button_pressed(0, mb_right));


//Actaully Moving
if (moving) {
    if (moveUp) {
        if (!(place_meeting(x,y-moveSpeed,obj_wall))){
            y -= moveSpeed;
        }
        else {
            while (!place_meeting(x,y - 1,obj_wall)) {
                y -= 1;
            }
        }
        sprite_index = spr_playerMoveUp;
    }
    if (moveDown) {
        if (!(place_meeting(x,y+moveSpeed,obj_wall))){
            y += moveSpeed;
        }
        else {
            while (!place_meeting(x,y + 1,obj_wall)) {
                y += 1;
            }
        }
        sprite_index = spr_playerMoveDown;
    }
    if (moveLeft) {
        if (!(place_meeting(x-moveSpeed,y,obj_wall))){
            x -= moveSpeed;
        }
        else {
            while (!place_meeting(x - 1,y,obj_wall)) {
                x -= 1;
            }
        }
        sprite_index = spr_playerMoveLeft;
    }
    if (moveRight) {
        if (!(place_meeting(x+moveSpeed,y,obj_wall))){
            x += moveSpeed;
        }
        else {
            while (!place_meeting(x + 1,y,obj_wall)) {
                x += 1;
            }
        }
        sprite_index = spr_playerMoveRight;
    }
}
else {
    sprite_index = spr_playerIdle;
}

//Throw Shit
if (throwWrench &amp;&amp; global.scrap &gt;= 1) {
    wrench = instance_create(x, y, obj_projectile);
    wrench.image_angle = point_direction(x,y,mouse_x,mouse_y);
    wrench.direction = wrench.image_angle;
    wrench.speed = 10;
    global.scrap -= 1;
}

//BOMBS?!
if (placeBomb &amp;&amp; global.scrap &gt;= 5) {
    bomb = instance_create(x, y, obj_bomb);
    global.scrap -= 5;
}

image_yscale = imageScale;
image_xscale = imageScale;
image_speed = imageSpeed;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.playerHealth -= pushDamage;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collide
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
